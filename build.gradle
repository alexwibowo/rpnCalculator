/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

description = "RPN Calculator"

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'project-report'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'com.adarshr.test-logger'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
	ext.kotlin_version = '1.2.41'

	repositories {
		jcenter()
		mavenLocal()
		mavenCentral()
		maven {
            		url 'https://plugins.gradle.org/m2/'
        	}
	}
	configurations.maybeCreate('pitest')
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

		classpath "com.github.jengelman.gradle.plugins:shadow:${shadowPluginVersion}"

		classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
		classpath 'com.adarshr:gradle-test-logger-plugin:1.6.0'
		pitest 'org.pitest:pitest-junit5-plugin:0.3'
	}

}

sourceSets {
	main {
		java {
			srcDirs = ["src/main/java"]
		}
		resources {
			srcDir 'src/main/resources'
		}
	}
	test {
		java {
			srcDirs = ["src/test/java"]
		}
		resources {
			srcDir 'src/test/resources'
		}

	}
}

repositories {
	mavenLocal()
	mavenCentral()
}


dependencies {
		compile group: "org.jetbrains.kotlin", name:"kotlin-stdlib", version:"${kotlin_version}"
		compile group: "ch.obermuhlner", name:"big-math", version: "${bigMathVersion}"
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j2Version}"
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j2Version}"

		/* If existing components use Apache Commons Logging 1.x and you want to have this logging routed to Log4j 2, then add the following but do not remove any Commons Logging 1.x dependencies. */
		compile group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: "${log4j2Version}"

	/* If existing components use SLF4J and you want to have this logging routed to Log4j 2, then add the following but do not remove any SLF4J dependencies.
		The Log4j 2 SLF4J Binding allows applications coded to the SLF4J API to use Log4j 2 as the implementation.
		*/
		compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j2Version}"

		compile group: 'org.jetbrains', name: 'annotations', version: "${jetbrainsAnnotationsVersion}"
		compile group: 'com.google.guava', name: 'guava', version: "${guavaVersion}"
		compile group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"

		testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
		testCompile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j2Version}", classifier: "tests"

		testCompile "org.assertj:assertj-core:${assertjVersion}"
		testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterEngineVersion}"
		testCompile "org.junit.jupiter:junit-jupiter-engine:${junitJupiterEngineVersion}"

		// 	The junit-vintage-engine dependency adds support for unit tests that use JUnit 4 or JUnit 3.
		testCompile "org.junit.vintage:junit-vintage-engine:${junitVintageEngineVersion}"

		// The junit-platform-launcher dependency provides a public API for configuring and launching tests. This API is typically used by IDEs and build tools.
		testCompile "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"

		// The junit-platform-runner dependency allows us to run tests and test suites in a JUnit 4 environment.
		testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"

}

jar {
	manifest {
		attributes "Main-Class": "com.github.wibowo.RPNCalculator"
	}
}

plugins.withType(JavaPlugin) {
	task testJar(type: Jar) {
		classifier "test"
		from sourceSets.test.output
	}

	/** Produces sources JAR */
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	/** Produces javadoc JAR */
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from javadoc.destinationDir
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

test {
	useJUnitPlatform()
}

pitest {
	pitestVersion = "1.3.0"
	testPlugin = 'junit5'
	targetClasses = ['com.github.wibowo.*']  //by default "${project.group}.*"
	threads = 4
	outputFormats = ['XML', 'HTML']
	timestampedReports = false
}

testlogger {
    theme 'mocha'
    showExceptions true
    slowThreshold 2000
    showSummary true
    showPassed true
    showSkipped true
    showFailed true
    showStandardStreams false
    showPassedStandardStreams true
    showSkippedStandardStreams true
    showFailedStandardStreams true
}

